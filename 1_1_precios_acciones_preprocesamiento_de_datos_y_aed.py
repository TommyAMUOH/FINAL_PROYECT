# -*- coding: utf-8 -*-
"""1_1_Precios_Acciones_Preprocesamiento_de_datos_y_AED.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_vkppAZSLeWQRBUGtP-na-5N1gDzNMtu
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""#Preprocesamiento de datos

##Carga de datos
"""

AAPL = pd.read_csv("/content/drive/MyDrive/Database/AAPL.csv")
TSLA = pd.read_csv("/content/drive/MyDrive/Database/TSLA.csv")
GOOG = pd.read_csv("/content/drive/MyDrive/Database/GOOG.csv")
MSFT = pd.read_csv("/content/drive/MyDrive/Database/MSFT.csv")
AMZN = pd.read_csv("/content/drive/MyDrive/Database/AMZN.csv")

"""##Apple: Precios de acciones"""

AAPL.head()

AAPL.info()

# Drop NULL rows
AAPL.dropna(inplace = True)

# Change Dtype of Columns
AAPL["Date"] = pd.to_datetime(AAPL["Date"])
AAPL["Volume"] = AAPL["Volume"].str.replace(',', '')
AAPL = AAPL.astype({"Open": float, "Volume": float})

# Sort the Database by Date
AAPL = AAPL.sort_values(by = 'Date', ignore_index = True)

# Drop rows having Date < '2015-01-01'
AAPL = AAPL[AAPL["Date"] >= '2015-01-01'].reset_index(drop = True)

AAPL.describe()

"""##Tesla: Precios de acciones"""

TSLA.head()

TSLA.info()

# Drop NULL rows
TSLA.dropna(inplace = True)

# Change Dtype of Columns
TSLA["Date"] = pd.to_datetime(TSLA["Date"])
TSLA["Volume"] = TSLA["Volume"].str.replace(',', '')
TSLA = TSLA.astype({"Open": float, "Volume": float})

# Sort the Database by Date
TSLA = TSLA.sort_values(by = 'Date', ignore_index = True)

# Drop rows having Date < '2015-01-01'
TSLA = TSLA[TSLA["Date"] >= '2015-01-01'].reset_index(drop = True)

TSLA.describe()

"""##Google: Precios de acciones"""

GOOG.head()

GOOG.info()

# Drop NULL rows
GOOG.dropna(inplace = True)

# Change Dtype of Columns
GOOG["Date"] = pd.to_datetime(GOOG["Date"])

for col in ["Open", "High", "Low", "Close", "Adj. Close", "Volume"]:
  GOOG[col] = GOOG[col].str.replace(',', '')

GOOG = GOOG.astype({"Open": float, "High": float, "Low": float, "Close": float, "Adj. Close": float, "Volume": float})

# Sort the Database by Date
GOOG = GOOG.sort_values(by = 'Date', ignore_index = True)

# Drop rows having Date < '2015-01-01'
GOOG = GOOG[GOOG["Date"] >= '2015-01-01'].reset_index(drop = True)

GOOG.describe()

"""##Microsoft: Precios de acciones"""

MSFT.head()

MSFT.info()

# Drop NULL rows
MSFT.dropna(inplace = True)

# Change Dtype of Columns
MSFT["Date"] = pd.to_datetime(MSFT["Date"])
MSFT["Open"] = MSFT["Open"].str.replace(',', '')
MSFT["Volume"] = MSFT["Volume"].str.replace(',', '')
MSFT = MSFT.astype({"Open": float, "Volume": float})

# Sort the Database by Date
MSFT = MSFT.sort_values(by = 'Date', ignore_index = True)

# Drop rows having Date < '2015-01-01'
MSFT = MSFT[MSFT["Date"] >= '2015-01-01'].reset_index(drop = True)

MSFT.describe()

"""##Amazon: Precios de acciones"""

AMZN.head()

AMZN.info()

# Drop NULL rows
AMZN.dropna(inplace = True)

# Change Dtype of Columns
AMZN["Date"] = pd.to_datetime(AMZN["Date"])

for col in ["Open", "High", "Low", "Close", "Adj. Close", "Volume"]:
  AMZN[col] = AMZN[col].str.replace(',', '')

AMZN = AMZN.astype({"Open": float, "High": float, "Low": float, "Close": float, "Adj. Close": float, "Volume": float})

# Sort the Database by Date
AMZN = AMZN.sort_values(by = 'Date', ignore_index = True)

# Drop rows having Date < '2015-01-01'
AMZN = AMZN[AMZN["Date"] >= '2015-01-01'].reset_index(drop = True)

AMZN.describe()

"""#Análisis exploratorio de datos"""

Companies = [AAPL, TSLA, GOOG, MSFT, AMZN]
Companies_Title = ["Apple", "Tesla", "Google", "Microsoft", "Amazon"]

# Lets view historical view of the closing prices

plt.figure(figsize=(20, 12))
for index, company in enumerate(Companies):
  plt.subplot(3, 2, index + 1)
  plt.plot(company["Date"], company["Adj. Close"])
  plt.title(Companies_Title[index])
  plt.ylabel('Adj. Close')

"""Podemos ver en el gráfico anterior que las acciones de Telsa tienen un crecimiento tremendo en el periodo 2020-2021.

Si nos atenemos a las noticias, puede deberse a

1.   Las ventas de créditos de emisiones
2.   La entrada de Tesla en el mercado de los SUV compactos de rápido crecimiento
3.   Inicio de la producción en China

En cuanto al resto de empresas, podemos ver que COVID-19 es el principal factor que afecta al periodo 2020-2021.
"""

# Now lets plot the total volume of stock being traded each day

plt.figure(figsize=(20, 12))
for index, company in enumerate(Companies):
  plt.subplot(3, 2, index + 1)
  plt.plot(company["Date"], company["Volume"])
  plt.title(Companies_Title[index])
  plt.ylabel('Volume')

"""Ahora que hemos visto las visualizaciones del precio de cierre y el volumen negociado cada día, vamos a calcular la media móvil de la acción.

### ¿Cuál fue el promedio móvil de las distintas acciones?
"""

Moving_Average_Day = [10, 20, 50]
for Moving_Average in Moving_Average_Day:
  for company in Companies:
    column_name = f'Moving Average for {Moving_Average} days'
    company[column_name] = company["Adj. Close"].rolling(Moving_Average).mean()

plt.figure(figsize=(20, 12))
for index, company in enumerate(Companies):
  plt.subplot(3, 2, index + 1)
  plt.plot(company["Date"], company["Adj. Close"])
  plt.plot(company["Date"], company["Moving Average for 10 days"])
  plt.plot(company["Date"], company["Moving Average for 20 days"])
  plt.plot(company["Date"], company["Moving Average for 50 days"])
  plt.title(Companies_Title[index])
  plt.legend(("Adj. Close", "Moving Average for 10 days", "Moving Average for 20 days", "Moving Average for 50 days"))

"""### ¿Cuál fue la rentabilidad diaria promedio de la acción?

Ahora que hemos hecho un análisis preliminar, vamos a profundizar un poco más. Ahora vamos a analizar el riesgo de la acción. Para ello tendremos que fijarnos más en los cambios diarios de la acción, y no sólo en su valor absoluto.
"""

# pct_change() function calculates the percentage change between the current and a prior element.
# This function by default calculates the percentage change from the immediately previous row.

for company in Companies:
  company["Daily Return"] = company["Adj. Close"].pct_change()

plt.figure(figsize=(20, 12))
for index, company in enumerate(Companies):
  plt.subplot(3, 2, index + 1)
  plt.plot(company["Date"], company["Daily Return"])
  plt.title(Companies_Title[index])
  plt.ylabel('Daily Return')

"""Veamos ahora la rentabilidad media diaria mediante un histograma."""

# distplot is a deprecated function, so to ignore warnings, the filterwarnings function is used.

import warnings
warnings.filterwarnings('ignore')

plt.figure(figsize=(20, 15))
for index, company in enumerate(Companies):
  plt.subplot(3, 2, index + 1)
  sns.distplot(company["Daily Return"].dropna(), color = "purple")
  plt.title(Companies_Title[index])

"""La curtosis es una medida estadística que define en qué medida las colas de una distribución difieren de las colas de una distribución normal. En otras palabras, la curtosis determina si las colas de una distribución contienen valores extremos."""

print("Kurtosis Value")
for index, company in enumerate(Companies):
  print(f'{Companies_Title[index]}: {company["Daily Return"].kurtosis()}')

"""El gráfico anterior y el valor positivo de la curtosis indican que la obtención de valores extremos de rentabilidad diaria es poco frecuente.

### ¿Cuál fue la correlación entre el precio de cierre de diferentes acciones?
"""

# Companies_return contain closing price of all the companies
Companies_returns = pd.DataFrame()
Companies_returns["AAPL"] = AAPL["Adj. Close"]
Companies_returns["TSLA"] = TSLA["Adj. Close"]
Companies_returns["GOOG"] = GOOG["Adj. Close"]
Companies_returns["MSFT"] = MSFT["Adj. Close"]
Companies_returns["AMZN"] = AMZN["Adj. Close"]
Companies_returns.head()

# Companies_Daily_returns contains percentage daily returns of all the companies
Companies_Daily_returns = Companies_returns.pct_change()
Companies_Daily_returns.head()

"""Ahora, hagamos un gráfico de correlación, para obtener valores numéricos reales de la correlación entre el precio de cierre de las acciones"""

sns.heatmap(Companies_returns.corr(), annot=True, cmap="YlGnBu")

"""Por último, hagamos un gráfico de correlación, para obtener valores numéricos reales de la correlación entre los rendimientos diarios de las acciones."""

sns.heatmap(Companies_Daily_returns.corr(), annot=True, cmap="YlGnBu")

"""Del gráfico anterior se desprende que Microsoft y Google presentan la mayor correlación en los rendimientos diarios de las acciones.

### ¿Cuánto valor arriesgamos al invertir en una acción concreta?

Hay muchas formas de cuantificar el riesgo, una de las más básicas utilizando la información que hemos recopilado sobre los rendimientos porcentuales diarios es comparando el rendimiento esperado con la desviación típica de los rendimientos diarios.
"""

Returns = Companies_Daily_returns.dropna()

plt.figure(figsize=(20, 5))
plt.scatter(Returns.mean(), Returns.std())
plt.xlabel('Expected return')
plt.ylabel('Risk')

for label, x, y in zip(Companies_Title, Returns.mean(), Returns.std()):
    plt.annotate(label, xy = (x, y), xytext = (10, 0), textcoords = 'offset points')

"""En el gráfico anterior, podemos ver que Tesla tiene la mayor rentabilidad esperada y el mayor factor de riesgo. Google tiene la menor rentabilidad esperada y el menor factor de riesgo.

# CODIGOS EXTRAS PARA ANALISIS

# 1. Resumen de Precios de Cierre Ajustados
Este código generará un resumen estadístico de los precios de cierre ajustados para cada empresa.
"""

for company, title in zip(Companies, Companies_Title):
    print(f"Resumen de Precios de Cierre Ajustados para {title}")
    print(company["Adj. Close"].describe())
    print("\n")

"""# 2. Análisis de Volumen Negociado
Este código proporcionará un resumen del volumen negociado diario.
"""

for company, title in zip(Companies, Companies_Title):
    print(f"Resumen de Volumen Negociado para {title}")
    print(company["Volume"].describe())
    print("\n")

"""# 3. Análisis de Promedios Móviles
Este código calculará los promedios móviles y proporcionará un resumen.
"""

Moving_Average_Day = [10, 20, 50]
for company, title in zip(Companies, Companies_Title):
    print(f"Promedios Móviles para {title}")
    for Moving_Average in Moving_Average_Day:
        column_name = f'Moving Average for {Moving_Average} days'
        print(f"{column_name}: {company[column_name].dropna().describe()}")
    print("\n")

"""# 4. Resumen de Rentabilidad Diaria
Este código proporcionará un resumen de la rentabilidad diaria para cada empresa.
"""

for company, title in zip(Companies, Companies_Title):
    print(f"Resumen de Rentabilidad Diaria para {title}")
    print(company["Daily Return"].describe())
    print("\n")

"""# 5. Análisis de Correlación
Este código proporcionará una matriz de correlación de los precios de cierre ajustados.
"""

print("Correlación de Precios de Cierre Ajustados:")
print(Companies_returns.corr())
print("\n")

print("Correlación de Rentabilidad Diaria:")
print(Companies_Daily_returns.corr())

"""# 6. Riesgo vs Rendimiento
Este código calculará el rendimiento esperado y el riesgo (desviación estándar) para cada acción.
"""

print("Riesgo vs Rendimiento:")
for title, symbol in zip(Companies_Title, ['AAPL', 'TSLA', 'GOOG', 'MSFT', 'AMZN']):
    mean_return = Returns[symbol].mean()
    risk = Returns[symbol].std()
    print(f"{title} - Rendimiento Esperado: {mean_return}, Riesgo: {risk}")